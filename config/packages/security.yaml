security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Infrastructure\Entity\User\User:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Infrastructure\Entity\User\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        jwt_auth:
            pattern: ^/api/auth/sign-in
            stateless: true
            json_login:
                check_path: jwt_auth
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            jwt: ~

        refresh:
            pattern: ^/api/token/refresh
            stateless: true
        main:
            lazy: true
            pattern: ^/
            form_login:
                login_path: login
                check_path: login
                remember_me: true
            logout:
                path: logout
                target: login
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: /admin,      roles: [ ROLE_ADMIN, ROLE_EDITOR, ROLE_VISITOR ] }
        - { path: ^/api/doc,   roles: PUBLIC_ACCESS }
        - { path: ^/api/pages,   roles: PUBLIC_ACCESS }

    role_hierarchy:
        ROLE_VISITOR: [ROLE_USER]
        ROLE_EDITOR: [ROLE_VISITOR]
        ROLE_ADMIN: [ROLE_EDITOR]

    access_decision_manager:
        strategy: unanimous

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
